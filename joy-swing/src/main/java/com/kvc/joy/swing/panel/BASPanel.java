package com.kvc.joy.swing.panel;

import java.awt.Component;
import java.awt.Graphics;
import java.io.Serializable;
import javax.swing.JFrame;
import com.kvc.joy.swing.XComponentListener;
import com.kvc.joy.swing.DocWartermarkStatus;
import com.kvc.joy.swing.PanelStatusNote;
import com.kvc.joy.swing.SwingUtility;

/**
 * 基本的组件容器
 * @param <T> 需要在关闭时保存，打开时加载的信息，必须序列化
 * @author  zy
 * @author ckcs
 */
public class BASPanel<T extends Serializable> 
        extends javax.swing.JPanel
        implements XComponentListener
//        ,         EmbbedPanelInterface<T>
        //TODO
{

   /**
     * 主面板
     */
    //TODO
//    protected MainWindowCallBack mainWindow = ClientUtility.getClientUtility().getMainWindowCallBack();
    protected JFrame mainFrame = SwingUtility.getInstance().getMainFrame();
   //水印
    private DocWartermarkStatus docStatus;
   //是否要提示
    private PanelStatusNote panelNote;
   /**
     * 阻止--> 加载数据
     */
    public static final String LOCK_LOADING_STYLE = "lock_loading_style";
     /**
     * 阻止--> 只读
     */
    public static final String LOCK_READONLY_STYLE = "lock_readonly_style";

    /** Creates new form BASPanel */
    public BASPanel() {
        initComponents();
    }

    public DocWartermarkStatus getDocStatus() {
        return docStatus;
    }

    /**
     * 水印
     * @param status
     */
    public void setStatus(DocWartermarkStatus status) {
        this.docStatus = status;
        doModifyDocStatus();
    }

    public void setStatus(String statusImage, String personName) {
        if (docStatus == null) {
            docStatus = new DocWartermarkStatus(statusImage, personName);
        } else {
            docStatus.setStatus(statusImage);
            docStatus.setPersonName(personName);
        }
        doModifyDocStatus();
    }

  //水印状态改变
    private void doModifyDocStatus() {
        firePropertyChange("docStatusChange", null, docStatus);
        repaint();
    }

    /**
     * 面板提示
     * @return
     */
    public PanelStatusNote getPanelNote() {
        return panelNote;
    }

    public void showPanelNote(PanelStatusNote panelNote) {
        this.panelNote = panelNote;
        doModifyPanelNote(panelNote);
    }

    public void showPanelNote(String describe) {
        if (panelNote == null) {
            panelNote = new PanelStatusNote(describe);
        } else {
            panelNote.setDescribe(describe);
        }
        doModifyPanelNote(panelNote);
    }

    public void showPanelNote() {
        if (panelNote == null) {
            panelNote = new PanelStatusNote();
        } else {
            panelNote.setReferComponent(null);
            panelNote.setStyle(LOCK_LOADING_STYLE);
        }
        doModifyPanelNote(panelNote);
    }

    public void showPanelNote(Component referComp, String style) {
        if (panelNote == null) {
            panelNote = new PanelStatusNote();
        }
        panelNote.setReferComponent(referComp);
        panelNote.setStyle(style);
        doModifyPanelNote(panelNote);
    }

    public void showPanelNoteCustomer(Component noteComponet) {
        if (panelNote == null) {
            panelNote = new PanelStatusNote(noteComponet);
        } else {
            panelNote.setCompoent(noteComponet);
        }
        doModifyPanelNote(panelNote);
    }

    public void hidePanelNote() {
        doModifyPanelNote(null);
        panelNote = null;
    }

    //面板提示改变
    private void doModifyPanelNote(PanelStatusNote panelNote) {
        firePropertyChange("panelNoteChange", "-111111", panelNote);
        repaint();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 566, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 410, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

//    @Override
    //TODO
    public boolean closeingPanel() {
        return true;
    }

   /**
     * 关闭面板
     */
    public void close() {
        //TODO
//        mainWindow.removePanelByKey(hashCode());
    }

    //TODO
//
//    @Override
//    public T getStoreData() {
//        return null;
//    }
//
//    @Override
//    public void loadData(T dataKey) {
//    }
//
//    public JFrame getMainFrame() {
//        return mainFrame;
//    }
//
//    public MainWindowCallBack getMainWindow() {
//        return mainWindow;
//    }

    @Override
    public final boolean equals(Object obj) {
        return super.equals(obj);
    }

    @Override
    public final int hashCode() {
        return super.hashCode();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void postPaint(Graphics g) {
    }

        /**
     * 是否自动恢复面板设置.
     * 默认系统帮面板自动恢复面板的配置，但如果
     * 特定模块因为异步处理的原因希望手动恢复面板的配置的话，请
     * 覆盖这个方法，并返回false，则样在适当的时候，由面板
     * 自身调用MainWindowCallBack中的resumeModuleConfig(int key)进行面板配置的恢复。
     */
    public boolean isAutoResumeModuleConfig() {
        return true;
    }
}
